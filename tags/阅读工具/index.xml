<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>阅读工具 on Xu Qianchao&#39;s Blog</title>
    <link>https://againwq.github.io/tags/%E9%98%85%E8%AF%BB%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 阅读工具 on Xu Qianchao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 12 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://againwq.github.io/tags/%E9%98%85%E8%AF%BB%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>本地docker部署libretranslate翻译模型并采用CUDA加速</title>
      <link>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/libretranslate%E7%9A%84docker%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/libretranslate%E7%9A%84docker%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2/</guid>
      <description>Libtranslate的本地部署，并采用CUDA加速</description>
      <content:encoded><![CDATA[<h2 id="一libretanslate基本介绍">一、Libretanslate基本介绍</h2>
<p>   Libretanslate 是一个开源的，基于AI驱动的翻译软件，<a href="https://libretranslate.com/">官方网站</a>提供了在线的翻译功能，并且可以申请 api 密钥去调用 api 将翻译能力嵌入到我们自己的程序或者软件中。当然，<a href="https://github.com/LibreTranslate/LibreTranslate">官方的github</a>有详细的本地部署教程，如果有能力建议根据官方的 README 部署，本文是对可能遇到的一些问题的补充。本文采用的是 docker 部署，当然官方提供了直接通过 pip 包部署，读者可以根据自己的需求选择。效果图如下：</p>
<p><img loading="lazy" src="/images/Libretranslate%e7%bf%bb%e8%af%91%e6%95%88%e6%9e%9c.png" alt="libretranslate翻译效果"  />
</p>
<h2 id="二-docker-与-nvidia-docker-支持的前置条件">二. docker 与 nvidia docker 支持的前置条件</h2>
<p>   首先需要保证你的本地系统已经安装的 docker 环境，建议采用国内的源安装，比如清华源、阿里源等。同时建议配置docker镜像源防止由于网络问题无法拉取镜像。这里不提供安装配置命令，建议读者自行搜索相关资料。</br>
   使用 nvidia 的 docker 加速，需要读者本地拥有 nvidia 的显卡，并安装了显卡驱动。如果没有 nvidia 的显卡支持，可以跳过这一部分，进行 cpu 版本的本地部署。</br>
   首先要在自己的电脑上安装 nvidia docker 支持，参考的<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">官方地址</a>。根据你的 linux 发行版复制粘贴命令就行了，debian 发行版的安装命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 添加 apt 源</span>
</span></span><span class="line"><span class="cl">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sed <span class="s1">&#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#39;</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo sed -i -e <span class="s1">&#39;/experimental/ s/^#//g&#39;</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 更新源</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装nvidia-container-toolkit</span>
</span></span><span class="line"><span class="cl">sudo apt-get install -y nvidia-container-toolkit
</span></span></code></pre></div><p>   然后对 docker 进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">sudo nvidia-ctk runtime configure --runtime<span class="o">=</span>docker
</span></span><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></div><h2 id="三docker版本的libretranslate的本地部署">三、docker版本的libretranslate的本地部署</h2>
<p>   接下来我们进行部署。首先，我们需要在 github 上下载源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">git clone git@github.com:LibreTranslate/LibreTranslate.git
</span></span></code></pre></div><h3 id="1-cpu版本libretranslate的部署">1. cpu版本libretranslate的部署</h3>
<p>   cpu 版本部署非常简单，在源码根路径下执行下面的命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker compose -f docker-compose.yml up -d --build
</span></span></code></pre></div><p>   这个命令会根据 docker/Dockerfile 文件构建 libretranslate 镜像并部署在本地的 5000 端口。- -build 代表重新构建镜像。第一次构建好镜像后下一次可以把 - -build命令去掉，每次创建容器都会从网络上下载指定的翻译模型，因此 5000 端口并不能立即访问，可以通过 <code>docker stats</code> 查看容器的网络 IO 状态判断翻译模型是否下载完毕。</p>
<h3 id="2-gpu版本libretranslate的部署">2. GPU版本libretranslate的部署</h3>
<p>   部署gpu版本的 libretranslate 命令与上面相同，只是将 yml 文件为 docker-compose.cuda.yml。在部署之前，最好修改 docker/cuda.Dockerfile 文件将 cuda 的相关环境变量导出，大概在文件末尾的位置添加下面几行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># Depending on your cuda install you may need to uncomment this line to allow the container to access the cuda libraries</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ENV LD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/lib64</span>
</span></span><span class="line"><span class="cl">ENV <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib64
</span></span><span class="line"><span class="cl">ENV <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/cuda/bin
</span></span><span class="line"><span class="cl">ENV <span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
</span></span></code></pre></div><p>   然后通过<code>docker compose -f docker-compose.cuda.yml up -d --build</code>进行构建并部署即可。同样的，构建成功 docker 会启动在本地 5000 端口，每次创建容器都会从网络上下载指定的翻译模型。</p>
<h2 id="四可能遇到的问题">四、可能遇到的问题</h2>
<h3 id="1-构建镜像时apt和pip下载太慢">1. 构建镜像时apt和pip下载太慢</h3>
<p>   apt 和 pip 默认的官方源在国内访问不太稳定，可以在执行<code>apt install</code>和<code>pip install</code>之前更换镜像源为国内源，需要在对应的 Dockerfile中修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 更换apt源为清华源</span>
</span></span><span class="line"><span class="cl">RUN sed -i <span class="s1">&#39;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#39;</span>  /etc/apt/sources.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更换pip源为清华源，应该添加在Dockerfile中pip下载之后的位置</span>
</span></span><span class="line"><span class="cl">RUN pip3 config <span class="nb">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># cpu版本中Dockerfile采用了venv</span>
</span></span><span class="line"><span class="cl">RUN ./venv/bin/pip config <span class="nb">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
</span></span></code></pre></div><h3 id="2-urlerrorconnectionrefusederror111-connection-refused在-docker-日志中大量出现无法下载翻译模型">2. (URLError(ConnectionRefusedError(111, &lsquo;Connection refused&rsquo;)),)在 docker 日志中大量出现，无法下载翻译模型</h3>
<p>   Libretranslate 是基于 <code>argos-translate</code> 这个开源翻译模型开发的项目，内部仍然调用的是 argos-translate，argos-tanslate 下载一个 <code>index.json</code> 文件，然后根据你指定的需要支持的语言从 index.json 中获取下载路径。index.json 默认下载到 <code>~/.local/cache/argos-translate</code> 翻译模型默认下载保存到当前路径下 <code>db/session</code> 下。我出现的问题是从 docker 内部是无法正常下载index.json的，但是主机是可以正常下载的，因此我采用的方法是手动下载 index.json 并将其放到 Libretranslate 源码根目录下，然后在我要构建的 Dockerfile 末尾修改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 将主机当前目录的index.json放到容器的/root/.local/cache/argos-translate/下</span>
</span></span><span class="line"><span class="cl">RUN mkdir -p /root/.local/cache/argos-translate/
</span></span><span class="line"><span class="cl">RUN mv ./index.json /root/.local/cache/argos-translate/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">5000</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 原本的--host * 不知道为什么我会报错，这里改成 0.0.0.0就没有报错了</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里我只需要中英互译就可以了</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;libretranslate&#34;</span>, <span class="s2">&#34;--host&#34;</span>, <span class="s2">&#34;0.0.0.0&#34;</span>, <span class="s2">&#34;--load-only&#34;</span>，<span class="s2">&#34;zh,en&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>   这是参考的解决方案的<a href="https://community.libretranslate.com/t/failing-to-download-from-cloudflare-with-connectionrefusederror/960">链接</a>，这里提供我保存的<a href="/common/index.json">index.json文件</a></p>
<h3 id="3-启用-cuda-加速后进行翻译出现内部错误">3. 启用 cuda 加速后进行翻译出现内部错误</h3>
<p>   建议先进入 docker 内部使用 python执行 <code>torch.cuda.is_available()</code> 查看 CUDA 是否成功支持。</br>
   这里我的问题是我的 <strong>nvidia 驱动版本是 debian12 默认下载的535, CUDA 版本最高支持到 12.2</strong>, 而且我本地的 CUDA 环境是 11.8。<strong>Libretranslate默认构建镜像的 CUDA 版本是 12.4</strong>, 版本过高导致 torch 调用硬件失败。解决的方法是将 Libretranslate 构建时采用的基础镜像从 <code>FROM nvidia/cuda:12.4.1-devel-ubuntu20.04</code> 更换为 <code>FROM nvidia/cuda:12.2.0-devel-ubuntu20.04</code>。 注意一定要是 12 版本以上的，我之前采用与本地相同的 11.8 启动仍然失败了，<code>torch.cuda.is_available()</code> 的返回值是 True，但是运行时会出现动态链接库找不到的问题，当前这个版本好像默认要求 CUDA 版本大于 12。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Debian12中GoldenDict词典软件的使用</title>
      <link>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/goldendict/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/goldendict/</guid>
      <description>GoldenDict的基本使用，提供词典资源和调用百度api翻译的方法</description>
      <content:encoded><![CDATA[<h2 id="一goldendict基本介绍">一、GoldenDict基本介绍</h2>
<p>   GoldenDict 是一款开源的词典软件，它具有高度的定制性，可以自定义软件界面，它支持导入词典数据、调用外部网站和自定义程序等功能，对于需要
在学习中阅读英文文献时非常方便使用。在 Debian12 中可以直接通过 apt 命令下载该软件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install goldendict
</span></span></code></pre></div><p>  下载完毕后，软件界面如下：</p>
<p><img loading="lazy" src="/images/goldendict%e8%bd%af%e4%bb%b6.png" alt="GoldenDict软件界面"  />
</p>
<p>   在上面工具栏的<strong>编辑 -&gt; 首选项 -&gt; 界面</strong>可以设置界面语言，并且可以配置内置的一些主题风格，本文不讨论如何自定义界面风格。在<strong>编辑 -&gt; 首选项 -&gt; 词典</strong>可以配置词典数据来源。GoldenDict 支持多种词典来源，包括本地的词典数据、远程词典服务器、调用搜索引擎和调用脚本程序等。本文会给出一些在网络上搜集的本地词典资源（感谢这些资源的提供者），并给出一个调用<strong>百度官方api</strong>进行翻译的 python 脚本。</p>
<h2 id="二词典资源配置">二、词典资源配置</h2>
<h3 id="1本地词典资源">1.本地词典资源</h3>
<p>   打开<strong>编辑 -&gt; 首选项 -&gt; 词典 -&gt; 词典来源 -&gt; 文件</strong>，这里可以配置词典文件的路径，如果是文件夹路径需要勾上递归搜索，然后点击应用，这样 GoldenDict 会扫描所有指定的词典文件，并为其生成索引。如果词典数量比较多这个过程会比较漫长，这取决于你的电脑的性能。索引生成完毕后这些词典就可以使用了，索引文件会存储在本地磁盘中，下一次打开不需要重新生成了。我自己用的词典资源：
<a href="https://pan.baidu.com/s/10IJi6kACrTUGvQcmH_E-Bw?pwd=bp47">词典资源</a> 提取码: bp47。示例效果如图所示：</p>
<p><img loading="lazy" src="/images/goldendict%e6%95%88%e6%9e%9c.png" alt="GoldenDict示例效果"  />
</p>
<h3 id="2-调用百度翻译接口">2. 调用百度翻译接口</h3>
<p>   拥有这些本地词典后，GoldenDict 会帮助你从这些本地词典搜索你要查询的单词或者词语，只要你的词典中有对应的记录即可。但是GoldenDict并不支持句子翻译，即它不会把句子拆成一组单词分别去查询，除非你的词典中有这样一条句子的翻译记录。因此我考虑将百度翻译接入到 GoldenDict 中这样方便进行一些简短的句子翻译。</br>
   首先需要在<a href="https://api.fanyi.baidu.com/">百度翻译api</a>注册账户，选择通用翻译服务，进行认证后高级版通用翻译服务每个月会有一定量的免费额度。然后在<strong>管理控制台获取你的APP ID和密钥</strong>，替换下面代码中的 APP ID 和密钥，并配置日志文件路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置你自己的appid和appkey</span>
</span></span><span class="line"><span class="cl"><span class="n">appid</span> <span class="o">=</span> <span class="s1">&#39;xxxxxxxxxxxxxxxxxx&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">appkey</span> <span class="o">=</span> <span class="s1">&#39;xxxxxxxxxxxxxxxxxx&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EN_LIMIT</span> <span class="o">=</span> <span class="mi">800</span> <span class="c1"># 每800个英文字符添加一个换行符</span>
</span></span><span class="line"><span class="cl"><span class="n">ZH_LIMIT</span> <span class="o">=</span> <span class="mi">300</span>  <span class="c1"># 每300个汉字添加一个换行符</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EN_MIN_NUM</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">ZH_MIN_NUM</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hasZhChar</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[\u4e00-\u9fa5]&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">match</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">bool</span><span class="p">(</span><span class="k">match</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_md5</span><span class="p">(</span><span class="n">s</span><span class="err">，</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md5</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">encoding</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">full2half</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="c1">#全角转成半角</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mh">0x3000</span><span class="p">:</span>        
</span></span><span class="line"><span class="cl">            <span class="n">num</span> <span class="o">=</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="mh">0xFF01</span> <span class="o">&lt;=</span><span class="n">num</span> <span class="o">&lt;=</span> <span class="mh">0xFF5E</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">num</span> <span class="o">-=</span> <span class="mh">0xFEE0</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">+=</span> <span class="n">num</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">limit</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">EN_LIMIT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">sentences</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">positon</span> <span class="o">=</span> <span class="n">EN_LIMIT</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">sentences</span><span class="p">[</span><span class="n">positon</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">positon</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">+=</span> <span class="n">sentences</span><span class="p">[:</span><span class="n">positon</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">+=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="p">[</span><span class="n">positon</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span><span class="err">，</span> <span class="n">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">to_lang</span> <span class="o">=</span>  <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">endpoint</span> <span class="o">=</span> <span class="s1">&#39;http://api.fanyi.baidu.com&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/api/trans/vip/translate&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">url</span> <span class="o">=</span> <span class="n">endpoint</span> <span class="o">+</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">today</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">&#34;</span><span class="err">，</span> <span class="n">time</span><span class="o">.</span><span class="n">localtime</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sentences</span> <span class="o">=</span> <span class="n">full2half</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="err">，</span> <span class="s1">&#39; &#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">salt</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">32768</span><span class="err">，</span> <span class="mi">65536</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">hasZhChar</span><span class="p">(</span><span class="n">sentences</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">to_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ZH_MIN_NUM</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;汉字数量小于</span><span class="si">{</span><span class="n">ZH_MIN_NUM</span><span class="si">}</span><span class="s2">个，不翻译&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">to_lang</span> <span class="o">=</span> <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">EN_MIN_NUM</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;单词数量小于</span><span class="si">{</span><span class="n">EN_MIN_NUM</span><span class="si">}</span><span class="s2">个，不翻译&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Build request</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">EN_LIMIT</span><span class="p">)</span> <span class="k">if</span> <span class="n">from_lang</span> <span class="o">==</span> <span class="s1">&#39;en&#39;</span> <span class="k">else</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">ZH_LIMIT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sign</span> <span class="o">=</span> <span class="n">make_md5</span><span class="p">(</span><span class="n">appid</span> <span class="o">+</span> <span class="n">query</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">salt</span><span class="p">)</span> <span class="o">+</span> <span class="n">appkey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;appid&#39;</span><span class="p">:</span> <span class="n">appid</span><span class="err">，</span> <span class="s1">&#39;q&#39;</span><span class="p">:</span> <span class="n">query</span><span class="err">，</span> <span class="s1">&#39;from&#39;</span><span class="p">:</span> <span class="n">from_lang</span><span class="err">，</span> <span class="s1">&#39;to&#39;</span><span class="p">:</span> <span class="n">to_lang</span><span class="err">，</span> <span class="s1">&#39;salt&#39;</span><span class="p">:</span> <span class="n">salt</span><span class="err">，</span> <span class="s1">&#39;sign&#39;</span><span class="p">:</span> <span class="n">sign</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Send request</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="err">，</span> <span class="n">params</span><span class="o">=</span><span class="n">payload</span><span class="err">，</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="s2">&#34;error_code&#34;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Error: &#34;</span><span class="err">，</span> <span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;length: &#34;</span><span class="err">，</span> <span class="nb">len</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="s2">&#34;trans_result&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="n">item</span><span class="p">[</span><span class="s2">&#34;dst&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></span></code></pre></div><p>   然后需要在 GoldenDict 中配置，打开<strong>编辑 -&gt; 词典 -&gt; 词典来源 -&gt; 程序</strong>，添加下面一条记录：</p>
<table>
<thead>
<tr>
<th>已启用</th>
<th>类型</th>
<th>名称</th>
<th>命令行</th>
</tr>
</thead>
<tbody>
<tr>
<td>✔</td>
<td>文本</td>
<td>Baidu</td>
<td>python 你的python脚本的绝对路径 %GDWORD%</td>
</tr>
</tbody>
</table>
<p>   为了方便使用 GoldenDict，而不是每次都打开软件然后复制进去，我们需要启用<strong>编辑 -&gt; 首选项 -&gt; 热键</strong>，然后<strong>勾上使用Ctrl + C + C获取剪切板的热键</strong>，这样 GoldenDict 只要在后台启动，我们就可以使用热键调出翻译窗口了，效果如图所示：</p>
<p><img loading="lazy" src="/images/%e7%99%be%e5%ba%a6%e7%bf%bb%e8%af%91%e6%95%88%e6%9e%9c%e5%b1%95%e7%a4%ba.png" alt="百度翻译和热键效果展示"  />
</p>
<p>   上面的代码没有像图片中一样提供实时获取额度的功能，这个功能和真实的额度有一些小偏差，而且存在一些小 bug ，因此就不放上来了。读者可以自行修改代码实现自定义功能。
当然，百度翻译api网站的控制台可以查看每月的额度，只是不是实时的。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
