<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xu Qianchao&#39;s Blog</title>
    <link>https://againwq.github.io/</link>
    <description>Recent content on Xu Qianchao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 17 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://againwq.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker容器访问宿主机的docker环境</title>
      <link>https://againwq.github.io/posts/docker/docker%E5%AE%B9%E5%99%A8%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84docker%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/docker/docker%E5%AE%B9%E5%99%A8%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84docker%E7%8E%AF%E5%A2%83/</guid>
      <description>docker容器访问宿主机的docker环境</description>
      <content:encoded><![CDATA[<h2 id="一问题描述">一、问题描述</h2>
<p>   当我们使用docker容器的时候，有时候我们需要访问宿主机的docker环境，比如我们需要在容器中访问宿主机的docker服务，或者我们需要在容器中访问宿主机的docker网络。这时候我们就需要进行一些配置。</p>
<h2 id="二docker容器访问宿主机的docker环境">二、docker容器访问宿主机的docker环境</h2>
<p>   要想让docker容器访问宿主机器的docker环境，并可以在docker容器中使用docker命令，我们需要在docker容器中挂载宿主机的<strong>docker.sock文件和docker程序</strong>。docker.sock 文件是docker的socket文件，docker的api通过这个文件来进行通信。docker程序是docker的命令行程序，我们可以通过这个程序来操作docker，比如启动容器，停止容器等。在启动docker容器的时候，我们可以通过<code>-v</code>参数来挂载这两个文件，示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker run -d --name controller --privileged 
</span></span><span class="line"><span class="cl">-v /usr/bin/docker:/usr/bin/docker <span class="c1"># 挂载docker程序</span>
</span></span><span class="line"><span class="cl">-v /var/run/docker.sock:/var/run/docker.sock <span class="c1"># 挂载docker socket文件</span>
</span></span><span class="line"><span class="cl">-t ubuntu:latest
</span></span></code></pre></div><p>   注意，这里我们使用了<code>--privileged</code>参数，这个参数是为了让docker容器拥有更高的权限，这样我们才能在docker容器中使用docker命令。如果不加这个参数，我们在docker容器中使用docker命令的时候会报错，提示权限不够。</br>
   还需要注意的是，这里必须保证宿主机操作系统的<strong>glibc版本</strong>和容器运行的镜像的glibc版本相同，否则在容器中执行docker命令会出现glibc版本冲突的问题。因此容器和宿主机最好采用相同的linux发行版本。</p>
<h2 id="三在docker容器内部访问其他容器的网络命名空间">三、在docker容器内部访问其他容器的网络命名空间</h2>
<h3 id="1-linux网络命名空间">1. Linux网络命名空间</h3>
<p>  Linux 的网络命名空间（Network Namespace）是一种内核提供的资源隔离机制，它为系统中的网络资源提供了独立的上下文环境，网络命名空间允许在同一物理主机上创建多个相互隔离的网络环境。每个网络命名空间都有自己独立的网络设备（如网卡）、IP 地址、路由表、防火墙规则等网络资源。不同网络命名空间中的网络配置相互独立，互不影响。例如，在一个命名空间中配置的 IP 地址，在其他命名空间中不会冲突，也无法直接访问。<strong>这就像是在同一台主机上虚拟出了多台独立的网络设备，每个设备都有自己的网络栈</strong>。</br>
   通过刚刚的配置我们可以在容器内部使用docker network去配置容器的网络，但有时候我们需要更加复杂的网络配置，比如为两个容器创建<strong>veth pair</strong>。这就需要我们在容器内部访问其他容器的<strong>Linux 网络命名空间</strong>。</p>
<h3 id="2-配置方法">2. 配置方法</h3>
<p>   一般的容器，如何没有使用host网络模式，都会有自己的网络命名空间，但是docker服务并没有把他们挂载到<code>/var/run/netns</code>目录下，因此使用<code>ip netns</code>等命令是无法访问到这些网络命名空间的。我们通常使用<code>docker inspect</code>获取容器的进程号，然后通过<code>/proc/$pid/ns/net</code>文件来访问容器的网络命名空间，因此我们可以通过挂载<code>/proc</code>目录来访问容器的网络命名空间。示例如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker run -d --name controller --privileged 
</span></span><span class="line"><span class="cl">-v /usr/bin/docker:/usr/bin/docker
</span></span><span class="line"><span class="cl">-v /var/run/docker.sock:/var/run/docker.sock 
</span></span><span class="line"><span class="cl">-v /proc:/host_proc <span class="c1"># 挂载宿主机的/proc</span>
</span></span><span class="line"><span class="cl">-t ubuntu:latest
</span></span></code></pre></div><p>   为了防止<code>/proc</code>与容器内部的<code>/proc</code>目录冲突，这里我将其挂载为<code>/host_proc</code>。之后我们在容器内部将其他容器的命名空间链接到<code>/var/run/netns</code>目录下，就可以使用容器的pid直接访问容器的命名空间，而不需要输入完整的路径。比如我有一个pid为123的容器，示例命令如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">ln -s /host_proc/123/ns/net /var/run/netns/123
</span></span></code></pre></div><h3 id="3-host网络模式">3. host网络模式</h3>
<p>   通过上面的配置我们已经让容器可以访问其他容器的命令空间了。但是我们想要进行为两个容器创建veth pair或者使用linux bridge去连接容器，建议使用<strong>host网络模式</strong>。host网络模式是docker的一种网络模式，使用host网络模式的容器会和宿主机共享网络命名空间，这样容器就可以直接访问宿主机的网络设备，这样当我们使用<code>ip link</code>或者<code>brctl</code>等命令创建网络设备的时候，保证我们是在宿主机上创建的，而不是在容器内部创建的。</p>
<h2 id="四注意事项">四、注意事项</h2>
<ul>
<li>容器和宿主机最好采用相同的linux发行版本，以避免glibc版本冲突的问题。</li>
<li>使用<code>--privileged</code>参数让docker容器拥有更高的权限，这样我们才能在docker容器中使用docker命令。</li>
<li>使用<code>host</code>网络模式，可以让容器和宿主机共享网络命名空间，这样容器就可以直接访问宿主机的网络设备。</li>
<li>如果想要创建veth pair或者使用linux bridge去连接容器，然后使用ping等命令测试网络连通性，记得需要在你的特权容器中进行如下配置，否则可能会出现网络连通性问题：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">sysctl -w net.bridge.bridge-nf-call-iptables<span class="o">=</span><span class="m">0</span> <span class="c1"># 关闭iptables的bridge-nf功能</span>
</span></span><span class="line"><span class="cl">sysctl -w net.ipv4.icmp_echo_ignore_all<span class="o">=</span><span class="m">0</span>  <span class="c1"># 开启icmp响应</span>
</span></span></code></pre></div><ul>
<li>上面的这些配置会破坏docker的隔离性，在生产环境中请慎重使用。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>本地docker部署libretranslate翻译模型并采用CUDA加速</title>
      <link>https://againwq.github.io/posts/docker/libretranslate%E7%9A%84docker%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/docker/libretranslate%E7%9A%84docker%E7%89%88%E6%9C%AC%E9%83%A8%E7%BD%B2/</guid>
      <description>Libtranslate的本地部署，并采用CUDA加速</description>
      <content:encoded><![CDATA[<h2 id="一libretanslate基本介绍">一、Libretanslate基本介绍</h2>
<p>   Libretanslate 是一个开源的，基于AI驱动的翻译软件，<a href="https://libretranslate.com/">官方网站</a>提供了在线的翻译功能，并且可以申请 api 密钥去调用 api 将翻译能力嵌入到我们自己的程序或者软件中。当然，<a href="https://github.com/LibreTranslate/LibreTranslate">官方的github</a>有详细的本地部署教程，如果有能力建议根据官方的 README 部署，本文是对可能遇到的一些问题的补充。本文采用的是 docker 部署，当然官方提供了直接通过 pip 包部署，读者可以根据自己的需求选择。效果图如下：</p>
<p><img loading="lazy" src="/images/Libretranslate%e7%bf%bb%e8%af%91%e6%95%88%e6%9e%9c.png" alt="libretranslate翻译效果"  />
</p>
<h2 id="二-docker-与-nvidia-docker-支持的前置条件">二. docker 与 nvidia docker 支持的前置条件</h2>
<p>   首先需要保证你的本地系统已经安装的 docker 环境，建议采用国内的源安装，比如清华源、阿里源等。同时建议配置docker镜像源防止由于网络问题无法拉取镜像。这里不提供安装配置命令，建议读者自行搜索相关资料。</br>
   使用 nvidia 的 docker 加速，需要读者本地拥有 nvidia 的显卡，并安装了显卡驱动。如果没有 nvidia 的显卡支持，可以跳过这一部分，进行 cpu 版本的本地部署。</br>
   首先要在自己的电脑上安装 nvidia docker 支持，参考的<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">官方地址</a>。根据你的 linux 发行版复制粘贴命令就行了，debian 发行版的安装命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 添加 apt 源</span>
</span></span><span class="line"><span class="cl">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sed <span class="s1">&#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#39;</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo sed -i -e <span class="s1">&#39;/experimental/ s/^#//g&#39;</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 更新源</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装nvidia-container-toolkit</span>
</span></span><span class="line"><span class="cl">sudo apt-get install -y nvidia-container-toolkit
</span></span></code></pre></div><p>   然后对 docker 进行配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">sudo nvidia-ctk runtime configure --runtime<span class="o">=</span>docker
</span></span><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></div><h2 id="三docker版本的libretranslate的本地部署">三、docker版本的libretranslate的本地部署</h2>
<p>   接下来我们进行部署。首先，我们需要在 github 上下载源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">git clone git@github.com:LibreTranslate/LibreTranslate.git
</span></span></code></pre></div><h3 id="1-cpu版本libretranslate的部署">1. cpu版本libretranslate的部署</h3>
<p>   cpu 版本部署非常简单，在源码根路径下执行下面的命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker compose -f docker-compose.yml up -d --build
</span></span></code></pre></div><p>   这个命令会根据 docker/Dockerfile 文件构建 libretranslate 镜像并部署在本地的 5000 端口。- -build 代表重新构建镜像。第一次构建好镜像后下一次可以把 - -build命令去掉，每次创建容器都会从网络上下载指定的翻译模型，因此 5000 端口并不能立即访问，可以通过 <code>docker stats</code> 查看容器的网络 IO 状态判断翻译模型是否下载完毕。</p>
<h3 id="2-gpu版本libretranslate的部署">2. GPU版本libretranslate的部署</h3>
<p>   部署gpu版本的 libretranslate 命令与上面相同，只是将 yml 文件为 docker-compose.cuda.yml。在部署之前，最好修改 docker/cuda.Dockerfile 文件将 cuda 的相关环境变量导出，大概在文件末尾的位置添加下面几行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># Depending on your cuda install you may need to uncomment this line to allow the container to access the cuda libraries</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ENV LD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/lib64</span>
</span></span><span class="line"><span class="cl">ENV <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib64
</span></span><span class="line"><span class="cl">ENV <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/cuda/bin
</span></span><span class="line"><span class="cl">ENV <span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
</span></span></code></pre></div><p>   然后通过 <code>docker compose -f docker-compose.cuda.yml up -d --build</code>进行构建并部署即可。同样的，构建成功 docker 会启动在本地 5000 端口，每次创建容器都会从网络上下载指定的翻译模型。</p>
<h2 id="四可能遇到的问题">四、可能遇到的问题</h2>
<h3 id="1-构建镜像时apt和pip下载太慢">1. 构建镜像时apt和pip下载太慢</h3>
<p>   apt 和 pip 默认的官方源在国内访问不太稳定，可以在执行 <code>apt install</code>和 <code>pip install</code>之前更换镜像源为国内源，需要在对应的 Dockerfile中修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 更换apt源为清华源</span>
</span></span><span class="line"><span class="cl">RUN sed -i <span class="s1">&#39;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#39;</span>  /etc/apt/sources.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更换pip源为清华源，应该添加在Dockerfile中pip下载之后的位置</span>
</span></span><span class="line"><span class="cl">RUN pip3 config <span class="nb">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># cpu版本中Dockerfile采用了venv</span>
</span></span><span class="line"><span class="cl">RUN ./venv/bin/pip config <span class="nb">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
</span></span></code></pre></div><h3 id="2-urlerrorconnectionrefusederror111-connection-refused在-docker-日志中大量出现无法下载翻译模型">2. (URLError(ConnectionRefusedError(111, &lsquo;Connection refused&rsquo;)),)在 docker 日志中大量出现，无法下载翻译模型</h3>
<p>   Libretranslate 是基于 <code>argos-translate</code> 这个开源翻译模型开发的项目，内部仍然调用的是 argos-translate，argos-tanslate 下载一个 <code>index.json</code> 文件，然后根据你指定的需要支持的语言从 index.json 中获取下载路径。index.json 默认下载到 <code>~/.local/cache/argos-translate</code> 翻译模型默认下载保存到当前路径下 <code>db/session</code> 下。我出现的问题是从 docker 内部是无法正常下载index.json的，但是主机是可以正常下载的，因此我采用的方法是手动下载 index.json 并将其放到 Libretranslate 源码根目录下，然后在我要构建的 Dockerfile 末尾修改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="c1"># 将主机当前目录的index.json放到容器的/root/.local/cache/argos-translate/下</span>
</span></span><span class="line"><span class="cl">RUN mkdir -p /root/.local/cache/argos-translate/
</span></span><span class="line"><span class="cl">RUN mv ./index.json /root/.local/cache/argos-translate/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">5000</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 原本的--host * 不知道为什么我会报错，这里改成 0.0.0.0就没有报错了</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里我只需要中英互译就可以了</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;libretranslate&#34;</span>, <span class="s2">&#34;--host&#34;</span>, <span class="s2">&#34;0.0.0.0&#34;</span>, <span class="s2">&#34;--load-only&#34;</span>，<span class="s2">&#34;zh,en&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>   这是参考的解决方案的<a href="https://community.libretranslate.com/t/failing-to-download-from-cloudflare-with-connectionrefusederror/960">链接</a>，这里提供我保存的<a href="/common/index.json">index.json文件</a></p>
<h3 id="3-启用-cuda-加速后进行翻译出现内部错误">3. 启用 cuda 加速后进行翻译出现内部错误</h3>
<p>   建议先进入 docker 内部使用 python执行 <code>torch.cuda.is_available()</code> 查看 CUDA 是否成功支持。</br>
   这里我的问题是我的 <strong>nvidia 驱动版本是 debian12 默认下载的535, CUDA 版本最高支持到 12.2</strong>, 而且我本地的 CUDA 环境是 11.8。<strong>Libretranslate默认构建镜像的 CUDA 版本是 12.4</strong>, 版本过高导致 torch 调用硬件失败。解决的方法是将 Libretranslate 构建时采用的基础镜像从 <code>FROM nvidia/cuda:12.4.1-devel-ubuntu20.04</code> 更换为 <code>FROM nvidia/cuda:12.2.0-devel-ubuntu20.04</code>。 注意一定要是 12 版本以上的，我之前采用与本地相同的 11.8 启动仍然失败了，<code>torch.cuda.is_available()</code> 的返回值是 True，但是运行时会出现动态链接库找不到的问题，当前这个版本好像默认要求 CUDA 版本大于 12。</p>
<h3 id="参考文献">参考文献</h3>
<blockquote>
<p><a href="https://github.com/LibreTranslate/LibreTranslate">LibreTranslate的github</a> </br>
<a href="https://community.libretranslate.com/t/failing-to-download-from-cloudflare-with-connectionrefusederror/960">翻译模型下载失败参考解决方案</a> </br></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Debian12中GoldenDict词典软件的使用</title>
      <link>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/goldendict/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/goldendict/</guid>
      <description>GoldenDict的基本使用，提供词典资源和调用百度api翻译的方法</description>
      <content:encoded><![CDATA[<h2 id="一goldendict基本介绍">一、GoldenDict基本介绍</h2>
<p>   GoldenDict 是一款开源的词典软件，它具有高度的定制性，可以自定义软件界面，它支持导入词典数据、调用外部网站和自定义程序等功能，对于需要
在学习中阅读英文文献时非常方便使用。在 Debian12 中可以直接通过 apt 命令下载该软件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install goldendict
</span></span></code></pre></div><p>  下载完毕后，软件界面如下：</p>
<p><img loading="lazy" src="/images/goldendict%e8%bd%af%e4%bb%b6.png" alt="GoldenDict软件界面"  />
</p>
<p>   在上面工具栏的<strong>编辑 -&gt; 首选项 -&gt; 界面</strong>可以设置界面语言，并且可以配置内置的一些主题风格，本文不讨论如何自定义界面风格。在<strong>编辑 -&gt; 首选项 -&gt; 词典</strong>可以配置词典数据来源。GoldenDict 支持多种词典来源，包括本地的词典数据、远程词典服务器、调用搜索引擎和调用脚本程序等。本文会给出一些在网络上搜集的本地词典资源（感谢这些资源的提供者），并给出一个调用<strong>百度官方api</strong>进行翻译的 python 脚本。</p>
<h2 id="二词典资源配置">二、词典资源配置</h2>
<h3 id="1本地词典资源">1.本地词典资源</h3>
<p>   打开<strong>编辑 -&gt; 首选项 -&gt; 词典 -&gt; 词典来源 -&gt; 文件</strong>，这里可以配置词典文件的路径，如果是文件夹路径需要勾上递归搜索，然后点击应用，这样 GoldenDict 会扫描所有指定的词典文件，并为其生成索引。如果词典数量比较多这个过程会比较漫长，这取决于你的电脑的性能。索引生成完毕后这些词典就可以使用了，索引文件会存储在本地磁盘中，下一次打开不需要重新生成了。我自己用的词典资源：
<a href="https://pan.baidu.com/s/10IJi6kACrTUGvQcmH_E-Bw?pwd=bp47">词典资源</a> 提取码: bp47。示例效果如图所示：</p>
<p><img loading="lazy" src="/images/goldendict%e6%95%88%e6%9e%9c.png" alt="GoldenDict示例效果"  />
</p>
<h3 id="2-调用百度翻译接口">2. 调用百度翻译接口</h3>
<p>   拥有这些本地词典后，GoldenDict 会帮助你从这些本地词典搜索你要查询的单词或者词语，只要你的词典中有对应的记录即可。但是GoldenDict并不支持句子翻译，即它不会把句子拆成一组单词分别去查询，除非你的词典中有这样一条句子的翻译记录。因此我考虑将百度翻译接入到 GoldenDict 中这样方便进行一些简短的句子翻译。</br>
   首先需要在<a href="https://api.fanyi.baidu.com/">百度翻译api</a>注册账户，选择通用翻译服务，进行认证后高级版通用翻译服务每个月会有一定量的免费额度。然后在<strong>管理控制台获取你的APP ID和密钥</strong>，替换下面代码中的 APP ID 和密钥，并配置日志文件路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置你自己的appid和appkey</span>
</span></span><span class="line"><span class="cl"><span class="n">appid</span> <span class="o">=</span> <span class="s1">&#39;xxxxxxxxxxxxxxxxxx&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">appkey</span> <span class="o">=</span> <span class="s1">&#39;xxxxxxxxxxxxxxxxxx&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EN_LIMIT</span> <span class="o">=</span> <span class="mi">800</span> <span class="c1"># 每800个英文字符添加一个换行符</span>
</span></span><span class="line"><span class="cl"><span class="n">ZH_LIMIT</span> <span class="o">=</span> <span class="mi">300</span>  <span class="c1"># 每300个汉字添加一个换行符</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EN_MIN_NUM</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">ZH_MIN_NUM</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hasZhChar</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[\u4e00-\u9fa5]&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">match</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">bool</span><span class="p">(</span><span class="k">match</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_md5</span><span class="p">(</span><span class="n">s</span><span class="err">，</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">md5</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">encoding</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">full2half</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="c1">#全角转成半角</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mh">0x3000</span><span class="p">:</span>        
</span></span><span class="line"><span class="cl">            <span class="n">num</span> <span class="o">=</span> <span class="mi">32</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="mh">0xFF01</span> <span class="o">&lt;=</span><span class="n">num</span> <span class="o">&lt;=</span> <span class="mh">0xFF5E</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">num</span> <span class="o">-=</span> <span class="mh">0xFEE0</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">+=</span> <span class="n">num</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">limit</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">EN_LIMIT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">sentences</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">position</span> <span class="o">=</span> <span class="n">EN_LIMIT</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">sentences</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">position</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">+=</span> <span class="n">sentences</span><span class="p">[:</span><span class="n">position</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">+=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="p">[</span><span class="n">position</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span><span class="err">，</span> <span class="n">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">to_lang</span> <span class="o">=</span>  <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">endpoint</span> <span class="o">=</span> <span class="s1">&#39;http://api.fanyi.baidu.com&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/api/trans/vip/translate&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">url</span> <span class="o">=</span> <span class="n">endpoint</span> <span class="o">+</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">today</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">&#34;</span><span class="err">，</span> <span class="n">time</span><span class="o">.</span><span class="n">localtime</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sentences</span> <span class="o">=</span> <span class="n">full2half</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="err">，</span> <span class="s1">&#39; &#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">salt</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">32768</span><span class="err">，</span> <span class="mi">65536</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">hasZhChar</span><span class="p">(</span><span class="n">sentences</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">to_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ZH_MIN_NUM</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;汉字数量小于</span><span class="si">{</span><span class="n">ZH_MIN_NUM</span><span class="si">}</span><span class="s2">个，不翻译&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">from_lang</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="n">to_lang</span> <span class="o">=</span> <span class="s1">&#39;zh&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sentences</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">EN_MIN_NUM</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;单词数量小于</span><span class="si">{</span><span class="n">EN_MIN_NUM</span><span class="si">}</span><span class="s2">个，不翻译&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Build request</span>
</span></span><span class="line"><span class="cl">    <span class="n">query</span> <span class="o">=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">EN_LIMIT</span><span class="p">)</span> <span class="k">if</span> <span class="n">from_lang</span> <span class="o">==</span> <span class="s1">&#39;en&#39;</span> <span class="k">else</span> <span class="n">split_data</span><span class="p">(</span><span class="n">sentences</span><span class="err">，</span> <span class="n">ZH_LIMIT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sign</span> <span class="o">=</span> <span class="n">make_md5</span><span class="p">(</span><span class="n">appid</span> <span class="o">+</span> <span class="n">query</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">salt</span><span class="p">)</span> <span class="o">+</span> <span class="n">appkey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;appid&#39;</span><span class="p">:</span> <span class="n">appid</span><span class="err">，</span> <span class="s1">&#39;q&#39;</span><span class="p">:</span> <span class="n">query</span><span class="err">，</span> <span class="s1">&#39;from&#39;</span><span class="p">:</span> <span class="n">from_lang</span><span class="err">，</span> <span class="s1">&#39;to&#39;</span><span class="p">:</span> <span class="n">to_lang</span><span class="err">，</span> <span class="s1">&#39;salt&#39;</span><span class="p">:</span> <span class="n">salt</span><span class="err">，</span> <span class="s1">&#39;sign&#39;</span><span class="p">:</span> <span class="n">sign</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Send request</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="err">，</span> <span class="n">params</span><span class="o">=</span><span class="n">payload</span><span class="err">，</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="s2">&#34;error_code&#34;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Error: &#34;</span><span class="err">，</span> <span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;length: &#34;</span><span class="err">，</span> <span class="nb">len</span><span class="p">(</span><span class="n">query</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="s2">&#34;trans_result&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="n">item</span><span class="p">[</span><span class="s2">&#34;dst&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></span></code></pre></div><p>   然后需要在 GoldenDict 中配置，打开<strong>编辑 -&gt; 词典 -&gt; 词典来源 -&gt; 程序</strong>，添加下面一条记录：</p>
<table>
<thead>
<tr>
<th>已启用</th>
<th>类型</th>
<th>名称</th>
<th>命令行</th>
</tr>
</thead>
<tbody>
<tr>
<td>✔</td>
<td>文本</td>
<td>Baidu</td>
<td>python 你的python脚本的绝对路径 %GDWORD%</td>
</tr>
</tbody>
</table>
<p>   为了方便使用 GoldenDict，而不是每次都打开软件然后复制进去，我们需要启用<strong>编辑 -&gt; 首选项 -&gt; 热键</strong>，然后<strong>勾上使用Ctrl + C + C获取剪切板的热键</strong>，这样 GoldenDict 只要在后台启动，我们就可以使用热键调出翻译窗口了，效果如图所示：</p>
<p><img loading="lazy" src="/images/%e7%99%be%e5%ba%a6%e7%bf%bb%e8%af%91%e6%95%88%e6%9e%9c%e5%b1%95%e7%a4%ba.png" alt="百度翻译和热键效果展示"  />
</p>
<p>   上面的代码没有像图片中一样提供实时获取额度的功能，这个功能和真实的额度有一些小偏差，而且存在一些小 bug ，因此就不放上来了。读者可以自行修改代码实现自定义功能。
当然，百度翻译api网站的控制台可以查看每月的额度，只是不是实时的。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>C语言使用泰勒展开实现sinx并优化</title>
      <link>https://againwq.github.io/posts/c%E8%AF%AD%E8%A8%80/c%E5%AE%9E%E7%8E%B0sinx%E5%B9%B6%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/posts/c%E8%AF%AD%E8%A8%80/c%E5%AE%9E%E7%8E%B0sinx%E5%B9%B6%E4%BC%98%E5%8C%96/</guid>
      <description>C语言使用泰勒展开实现sinx的思路，以及程序的优化设计</description>
      <content:encoded><![CDATA[<h2 id="一sinx-泰勒展开的c实现">一、sinx 泰勒展开的C实现</h2>
<h3 id="1sinx-泰勒展开公式">1.sinx 泰勒展开公式</h3>
<p>   sinx 的泰勒展开如下：</p>
<p>$$
sinx = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + &hellip; + \frac{(-1)^n}{(2n + 1)!}x^{2n+1}
$$</p>
<p>   其中 n 从 0 开始计算，我采用的公式形态上是 $x=0$ 处的泰勒展开。实际上我们可以把 $x$ 写成 $x = x + x_0$ 来实现 $x=x_0$ 处的展开</p>
<h3 id="2c实现sinx泰勒展开">2.C实现sinx泰勒展开</h3>
<p>   我们通过控制精度来控制展开项数，并且我们只考虑 $0-2\pi$ 的范围，归一化处理我们之后再详细考虑，通过泰勒展开公式我们的 C 程序如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define degree 1e-2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">res</span><span class="err">，</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">factor</span><span class="p">;</span>  <span class="c1">// 阶乘
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">term</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>    <span class="c1">// 每一项的结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">term</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">degree</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">factor</span> <span class="o">*=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">term</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="nf">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>   上面的代码基本是严格按照公式计算的，可惜的是它并不能正常工作，这涉及到<strong>计算阶乘时整数溢出</strong>的问题。当输入比较小，比如 0.2，那么大概在第二项就达到了我们设定的精度 0.01 了，此时 factor 为 6，但是如果输入为 6.23 左右时，我们要计算 10 项以上才能达到我们设定的精度，第 10 项需要计算 21 的阶乘，即便使用 <strong>64 位无符号整型存储</strong>也不够，因此我们需要对其进行一定的优化。</p>
<h2 id="二sinx-泰勒展开优化">二、sinx 泰勒展开优化</h2>
<h3 id="1通过固定计算的阶数来保证不溢出">1.通过固定计算的阶数来保证不溢出</h3>
<p>   很容易想到的一点就是我们可以通过固定展开的项数来保证计算过程不会溢出，比如我们固定每次展开项数为 7，C 程序如下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TIMES 7
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">res</span><span class="err">，</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">factor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TIMES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">factor</span> <span class="o">*=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="nf">pow</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="nf">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">factor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>  经测试，该程序在 $0-2\pi$ 内不会出现精度溢出的问题</p>
<h3 id="2从公式出发改变实现方法">2.从公式出发改变实现方法</h3>
<p>   观察 sinx 的泰勒展开我们可以得到如下规律：</p>
<ul>
<li>记第 i 项展开式为 $a_i = \frac{(-1)^i}{(2i + 1)!}x^{2i+1}$</li>
<li>则有 $a_i = a_{i-1} \cdot \frac{-x^2}{(2i)\cdot(2i+1)}$</li>
</ul>
<p>   我们可以看出相邻两项相差一个乘积因子 $\frac{-x^2}{(2i)\cdot(2i+1)}$，而且这个因子中不会产生太大的数据导致数据溢出。这样我们可以保留通过精度控制展开项数的方法，而且不会产生数据溢出。实现的 C 程序如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define pi 3.14159265
</span></span></span><span class="line"><span class="cl"><span class="cp">#define degree 1e-2         </span><span class="c1">// ̩精度设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">float</span> <span class="n">factor_diff_mem</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="c1">// 乘积因子的分母部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mf">1.0</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">6</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">20</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">42</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">72</span><span class="err">，</span>
</span></span><span class="line"><span class="cl">    <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">110</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">156</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">210</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">272</span><span class="err">，</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">342</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">diff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">term</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>   <span class="c1">// 展开的每一项
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">diff</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>  <span class="c1">//乘积因子的分子部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">term</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">degree</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">term</span> <span class="o">*=</span> <span class="n">diff</span> <span class="o">*</span> <span class="n">factor_diff_mem</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>   这里我们也做了一些优化，我们不再在 for 循环中去计算因子的分母部分，而是在编译阶段直接计算出，<strong>程序运行时直接查表即可</strong>，这也是经典的<strong>空间换时间</strong>的优化方式。可以看到现在这个程序已经没有指数和阶乘这种费时又可能导致溢出的计算了</p>
<h2 id="三三种方法时间比较">三、三种方法时间比较</h2>
<h3 id="1测试环境和代码">1.测试环境和代码</h3>
<p>   接下来我们将这两种方法和C标准库下的sinx进行时间上的比较，我采用的平台是 <strong>x86_64，Debian 12 系统，gcc 12.2</strong>，测试代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">get_us_time</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tv</span><span class="err">，</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">tv</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sinx_time_test</span><span class="p">(</span><span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">fun_sin</span><span class="p">)(</span><span class="kt">float</span><span class="p">)</span><span class="err">，</span> <span class="kt">float</span> <span class="o">*</span><span class="n">data</span><span class="err">，</span> <span class="kt">int</span> <span class="n">n</span><span class="err">，</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span><span class="err">，</span> <span class="n">end</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">start</span> <span class="o">=</span> <span class="nf">get_us_time</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>  <span class="c1">// 周期数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="n">n</span><span class="p">;</span>    <span class="c1">// 0-2pi取n个点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// printf(&#34;%f\n&#34;， data[i]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">end</span> <span class="o">=</span> <span class="nf">get_us_time</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>   这里采用两层循环是为了更方便看到差距以外，还要保证一个周期内不要取太多点，导致输入的x精度过高，这里我们不对精度做太高要求。</p>
<h3 id="2程序运行时间对比">2.程序运行时间对比</h3>
<p>   三种方法程序运行时间如下：</p>
<table>
<thead>
<tr>
<th>C standard</th>
<th>Fixed degree</th>
<th>Fixed items</th>
</tr>
</thead>
<tbody>
<tr>
<td>184 us</td>
<td>266 us</td>
<td>1701 us</td>
</tr>
</tbody>
</table>
<p>   多次运行数值上的结果可能不一样，但是三者的关系基本不变，标准库的 sinx 最快，其次是我们优化后的固定精度的实现，最后是固定周期的实现。我们可以看到优化后的固定精度的实现和 C 标准库执行时间差不多，只有<strong>几十us</strong>的差距，但是固定周期的实现方法运行的时间却是其他两种方法的 <strong>10 倍</strong>，可见其效率之低。</p>
<h3 id="3程序运行精度对比">3.程序运行精度对比</h3>
<p>   我们借助 gnuplot 去绘制这三种方法的 sinx 曲线去大概对比精度，如图所示：</p>
<p><img loading="lazy" src="/images/sinx.png" alt="三种实现方法的sinx曲线"  />
</p>
<p>   可以看到，<strong>当x逐渐变大时，固定周期的方法的精度已经出现非常明显的误差了，而我们优化后的固定精度的方法几乎是与标准库的实现完全重叠，甚至我们可以尝试继续调小精度来提升程序运行速度</strong>。</p>
<h2 id="四输入归一化处理">四、输入归一化处理</h2>
<p>   前面我们已经实现了速度接近标准库实现的泰勒展开，但是范围被限定在 $(-2\pi， 2\pi)$ 之间，其实我们也可以输入超过这个范围的数据，但是随着输入的绝对值的变大，为了保证相同的精度，泰勒展开项数会逐渐增多，程序运行速度会越来越慢，最后很有有可能导致精度再次溢出。<strong>我们不希望不同的输入对程序的运行状态有太大的影响</strong>。因此，我们需要对输入进行归一化处理。</p>
<h3 id="1归一化操作">1.归一化操作</h3>
<p>   归一化操作其实很简单，借助 sinx 的周期性，在本程序中归一化操作如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">float</span> <span class="n">T</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span><span class="p">;</span>  <span class="c1">// sinx周期为2pi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">x</span> <span class="o">/</span> <span class="n">T</span><span class="p">);</span>  <span class="c1">// 计算周期数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">x</span> <span class="o">-=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">T</span><span class="p">;</span>    <span class="c1">// sin(x) = sinx(x - 2n*pi)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="2对除法的优化">2.对除法的优化</h3>
<p>  在某些平台上，比如<strong>DSP芯片</strong>中，我们不希望程序中出现除法操作，因为除法是一个非常耗时的操作。在很多DSP芯片中<strong>加法和乘法</strong>是基本计算操作，cpu只需要<strong>一个指令</strong>就能完成，但是除法是非常耗时的，所以我们可以尝试改写一下，将其变成乘法的形式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">float</span> <span class="n">T</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">T</span> <span class="c1">// 编译阶段执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">-=</span> <span class="n">T</span> <span class="o">*</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">x</span> <span class="o">*</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>  我们把涉及到除法的部分放到编译阶段执行，这样可以优化在某些不支持快速计算除法的平台上的运行速度。</p>
<h3 id="3对浮点数截断的操作">3.对浮点数截断的操作</h3>
<p>  这个优化也是在DSP芯片的场景中，我们使用 int 类型强制转换来对浮点数进行截断操作，这句话看起来很简单，实际上是一个非常复杂的操作，因为<strong>浮点数的存储方式不像整型数据那样01排列然后根据二进制计算即可，浮点数有其自己的存储方式。你可以很容易通过整型数据的二进制去计算 10 进制，但是浮点数的二进制却不是那么容易计算</strong>。<strong>IEEE754标准</strong>就定义了浮点数在二进制中的存储格式，这里不做过多介绍。</br>
  总之知道存储格式后我们可以通过位运算去进行浮点数截断的操作，我之前在 CCS V5.5 仿真 TMS320VC5509A 芯片的平台上测试过，这个方法确实可以提升程序运行速度，甚至比库函数还快，但是在 x86 平台上几乎没有多少提升。（代码是参考网上一篇文章的，但是我忘记链接了&hellip;）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">union</span> <span class="n">FloatBit</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ret</span><span class="err">，</span> <span class="n">bias</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Float2Int</span><span class="p">(</span><span class="kt">float</span> <span class="n">f</span><span class="p">)</span> <span class="c1">// 快速转换浮点数为整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span> <span class="o">=</span> <span class="p">(</span><span class="mi">23l</span> <span class="o">+</span> <span class="mi">127l</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">&lt;</span> <span class="mf">0.0f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span> <span class="o">=</span> <span class="p">((</span><span class="mi">23l</span> <span class="o">+</span> <span class="mi">127l</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1l</span> <span class="o">&lt;&lt;</span> <span class="mi">22</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f</span> <span class="o">+=</span> <span class="n">bias</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f_b</span> <span class="o">-=</span> <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ret</span><span class="p">.</span><span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>  需要注意你的平台上 int 位数应该和 float 一样都是 32 位，如果int是 16 位应该换成 long 或者其他 32 位的整型类型。</p>
<h2 id="五最终程序实现">五、最终程序实现</h2>
<p>  最终我们优化完的程序如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define pi 3.14159265
</span></span></span><span class="line"><span class="cl"><span class="cp">#define degree 1e-2                  </span><span class="c1">// ̩精度设置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">float</span> <span class="n">factor_diff_mem</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="c1">// 泰勒展开因子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">6</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">20</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">42</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">72</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">110</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">156</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">210</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">272</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">342</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">float</span> <span class="n">T</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">union</span> <span class="n">FloatBit</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ret</span><span class="p">,</span> <span class="n">bias</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Float2Int</span><span class="p">(</span><span class="kt">float</span> <span class="n">f</span><span class="p">)</span> <span class="c1">// 快速转换浮点数为整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span> <span class="o">=</span> <span class="p">(</span><span class="mi">23l</span> <span class="o">+</span> <span class="mi">127l</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">&lt;</span> <span class="mf">0.0f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span> <span class="o">=</span> <span class="p">((</span><span class="mi">23l</span> <span class="o">+</span> <span class="mi">127l</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1l</span> <span class="o">&lt;&lt;</span> <span class="mi">22</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f</span> <span class="o">+=</span> <span class="n">bias</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">.</span><span class="n">f_b</span> <span class="o">-=</span> <span class="n">bias</span><span class="p">.</span><span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ret</span><span class="p">.</span><span class="n">f_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">fun_sin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">diff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">-=</span> <span class="n">T</span> <span class="o">*</span> <span class="nf">Float2Int</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">term</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">diff</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">term</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">degree</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">term</span> <span class="o">*=</span> <span class="n">diff</span> <span class="o">*</span> <span class="n">factor_diff_mem</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">term</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>  我们尝试将输入 $x$ 改成 $x+b,b=100i, -100 &lt; i &lt; 100$，去将这个程序与 C 标准库程序对比，如图所示：</p>
<p><img loading="lazy" src="/images/%e4%b8%a4%e7%a7%8d%e6%96%b9%e6%b3%95%e5%9c%a8%e4%b8%8d%e5%90%8c%e8%be%93%e5%85%a5%e8%8c%83%e5%9b%b4%e7%9a%84%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94.png" alt="两种方法在不同输入范围的性能对比"  />
</p>
<p>  可以看到，两种方法在<strong>运行时间和稳定性</strong>上差距很小，我们的程序达到了我们预期的性能了</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>标签</title>
      <link>https://againwq.github.io/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/tags/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://againwq.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://againwq.github.io/about/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    
  </channel>
</rss>
